{"version":3,"sources":["components/QuoteGenerator.js","App.js","serviceWorker.js","index.js"],"names":["QuoteGenerator","_ref","assignNewQuoteIndex","selectedQuote","react_default","a","createElement","Card_default","CardContent_default","Typography_default","id","quote","author","CardActions_default","Button_default","size","onClick","index_es","target","href","encodeURI","concat","react_fontawesome_index_es","icon","faTwitter","withStyles","container","display","height","alignItems","classes","_useState","useState","_useState2","Object","slicedToArray","quotes","setquotes","_useState3","_useState4","selectedQuoteIndex","setSelectedQuoteIndex","getSelectedQuote","length","Number","isInteger","useEffect","asyncToGenerator","regenerator_default","mark","_callee","data","wrap","_context","prev","next","fetch","sent","json","random","stop","className","justify","xs","lg","item","components_QuoteGenerator","generateNewQuoteIndex","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yVAgCeA,EArBQ,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,oBAAqBC,EAAvBF,EAAuBE,cAAvB,OACnBC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,KACID,EAAAC,EAAAC,cAACE,EAAAH,EAAD,KAEID,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAYK,GAAG,QACdP,EAAcQ,MADf,KACuBP,EAAAC,EAAAC,cAAA,QAAMI,GAAG,UAAUP,EAAcS,UAI5DR,EAAAC,EAAAC,cAACO,EAAAR,EAAD,KACAD,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAQK,GAAG,YAAYK,KAAK,QAAQC,QAASd,GAA7C,gBACAE,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAYP,GAAG,cAAcQ,OAAO,SACpCC,KAAOC,UAAS,yCAAAC,OAA0ClB,EAAcQ,MAAxD,0BAChBP,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAiBC,KAAMC,IAAWT,KAAK,2BCuEhCU,2BAzFA,CACbC,UAAW,CACTC,QAAS,OACTC,OAAQ,QACRC,WAAY,WAqFDJ,CApEf,SAAAxB,GAAuB,IAAT6B,EAAS7B,EAAT6B,QAASC,EACMC,mBAAS,IADfC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACfK,EADeH,EAAA,GACPI,EADOJ,EAAA,GAAAK,EAE8BN,mBAAS,MAFvCO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEfE,EAFeD,EAAA,GAEKE,EAFLF,EAAA,GAyCvB,SAASG,IAEP,IAAGN,EAAOO,QAAWC,OAAOC,UAAUL,GAGtC,OAAOJ,EAAOI,GAMZ,OAhDHM,oBAASZ,OAAAa,EAAA,EAAAb,CAAAc,EAAA3C,EAAA4C,KAAC,SAAAC,IAAA,IAAAC,EAAAf,EAAA,OAAAY,EAAA3C,EAAA+C,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACWC,MAAO,yIADlB,cACFL,EADEE,EAAAI,KAAAJ,EAAAE,KAAA,EAEaJ,EAAKO,OAFlB,OAEFtB,EAFEiB,EAAAI,KAGRpB,EAAUD,GACVK,EAAsBkB,iBAAO,EAAEvB,EAAOO,OAAQ,IAJtC,wBAAAU,EAAAO,SAAAV,MAKP,IA8CE9C,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAM4C,UAAW/B,EAAQJ,UAAYhB,GAAG,YAAYoD,QAAQ,SAASpC,WAAS,GAC9EtB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAM8C,GAAI,GAAIC,GAAI,EAAGC,MAAI,GAEvBvB,IACAtC,EAAAC,EAAAC,cAAC4D,EAAD,CAAgB/D,cAAeuC,IAAoBxC,oBAvB3D,WACEuC,EATF,WAEE,GAAIL,EAAOO,OAGX,OAAOgB,iBAAQ,EAAGvB,EAAOO,OAAS,GAIZwB,OAuBhB,SC3EYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtE,EAAAC,EAAAC,cAACqE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ee1bd26c.chunk.js","sourcesContent":["import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardActions from '@material-ui/core/CardActions'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport { IconButton } from '@material-ui/core';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faTwitter} from '@fortawesome/free-brands-svg-icons'\r\n\r\n\r\nconst QuoteGenerator = ({assignNewQuoteIndex, selectedQuote}) => (\r\n    <Card>\r\n        <CardContent>\r\n        {\r\n            <Typography id=\"text\">\r\n            {selectedQuote.quote} -<span id=\"author\">{selectedQuote.author}</span>\r\n            </Typography>\r\n        }\r\n        </CardContent>\r\n        <CardActions> \r\n        <Button id=\"new-quote\" size=\"small\" onClick={assignNewQuoteIndex}> Next Quote </Button>\r\n        <IconButton id=\"tweet-quote\" target=\"_blank\" \r\n        href= {encodeURI(`https://twitter.com/intent/tweet?text=${selectedQuote.quote}&hashtags=motivation`)}>\r\n        <FontAwesomeIcon icon={faTwitter} size=\"md\"></FontAwesomeIcon> \r\n        </IconButton>\r\n        </CardActions>\r\n    </Card>\r\n    \r\n\r\n);\r\n\r\nexport default QuoteGenerator;\r\n","import React, { useState, useEffect } from 'react';\r\nimport QuoteGenerator from './components/QuoteGenerator';\r\nimport {random} from 'lodash';\r\nimport {Grid} from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    height: '100vh',\r\n    alignItems: 'center'\r\n  }\r\n}\r\n\r\n//class App extends Component {\r\n // constructor(props){\r\n   // super(props);\r\n  \r\n  //this.state = {\r\n   // quotes: [],\r\n  //  selectedQuoteIndex: null //index where selected quote lives\r\n // }\r\n\r\n  //this.selectQuoteIndex = this.generateNewQuoteIndex.bind(this);\r\n  //this.assignNewQuoteIndex = this.assignNewQuoteIndex.bind(this);\r\n//}\r\n\r\nfunction App({classes}){\r\n const [quotes, setquotes] = useState([]);\r\n const [selectedQuoteIndex, setSelectedQuoteIndex] = useState(null);\r\n\r\n useEffect(async()=>{\r\n   const data = await fetch (\"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json\")\r\n   const quotes = await data.json();\r\n   setquotes(quotes);\r\n   setSelectedQuoteIndex(random(0,quotes.length -1))\r\n }, []) //to prevent rerendering\r\n\r\n\r\n\r\n//componentDidMount(){\r\n//  fetch(\"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json\")\r\n // .then(data => data.json())\r\n // .then(quotes => this.setState({quotes} ,this.assignNewQuoteIndex))\r\n// }  // because  index should be set only after getting quotes\r\n\r\n\r\n // nextQuoteclickHandler(){\r\n   // console.log('hi');\r\n  //}\r\n\r\n/**\r\n * return an integer representing an index in state.quotes \r\n * if states.quote is empty return undefuned\r\n */\r\nfunction generateNewQuoteIndex() {\r\n  //if no length in quotes array\r\n  if(!quotes.length){\r\n    return undefined;\r\n  }\r\n  return random (0, quotes.length - 1);\r\n}\r\n\r\nfunction assignNewQuoteIndex(){\r\n  setSelectedQuoteIndex(generateNewQuoteIndex())};\r\n\r\n\r\n\r\nfunction getSelectedQuote(){\r\n  // if empty array or no integer\r\n  if(quotes.length || !Number.isInteger(selectedQuoteIndex)){\r\n    return undefined;\r\n  }\r\n  return quotes[selectedQuoteIndex]\r\n}\r\n\r\n \r\n    //console.log(this.state.selectedQuoteIndex);\r\n  \r\n    return (\r\n      //as we are using get syntax therefore we can use selectedQuote as variable\r\n      //if selectedQuote exists \r\n      <Grid className={classes.container}  id=\"quote-box\" justify=\"center\" container>\r\n      <Grid xs={11} lg={8} item>\r\n      {\r\n        getSelectedQuote() ? \r\n        <QuoteGenerator selectedQuote={getSelectedQuote()} assignNewQuoteIndex={assignNewQuoteIndex} /> :\r\n        null\r\n      }\r\n      </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n\r\nexport default withStyles(styles)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}